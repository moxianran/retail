<?php

namespace frontend\controllers;

use app\models\RBet;
use app\models\RGame;
use app\models\RGameRecord;
use app\models\RNoticeGame;
use app\models\RNoticeSystem;
use app\models\RRechargeRecord;
use app\models\RUser;
use app\models\RUserGame;
use app\models\RUserLoginRecord;
use yii\web\Controller;


class MemberController extends Controller
{
    public $enableCsrfValidation = false;
    public $userInfo = [];

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        $session = \Yii::$app->session;
        $this->userInfo = $session->get('userInfo');

        if (!$this->userInfo) {
            return $this->redirect(['/']);
        }
        if($this->userInfo['expire_time'] < time()) {
            unset($session['userInfo']);

        }

    }

    /**
     * 用户中心
     */
    public function actionMember()
    {
        $gameNotice = $this->getGameNotice();

        $user = RUser::find()->where(['id' => $this->userInfo['id']])->asArray()->one();

        //游戏名称
        $game = RGame::find()->asArray()->all();
        $game = array_column($game, 'name', 'id');

        //用户游戏账号信息
        $userGame = RUserGame::find()->where(['user_id' => $this->userInfo['id']])->asArray()->all();
        $userGame = array_column($userGame, 'game_account', 'game_id');

        $gameInfo = '';
        if($userGame) {
            foreach ($userGame as $k=>$v) {
                $gameInfo .= $game[$k].": ".$v."  ";
            }
        }

        return $this->render('member', [
            'gameNotice' => $gameNotice,
            'user' => $user,
            'gameInfo' => $gameInfo
        ]);
    }

    /**
     * 修改个人信息
     */
    public function actionEdit()
    {
        if (\Yii::$app->request->isPost) {
            $post = \Yii::$app->request->post();

            $field = trim($post['field']);
            $newVal = trim($post['newVal']);

            if(empty($newVal)) {
                $json = ['result'=>'fail','info' => '操作失败'];
                return $this->asJson($json);
            }

            $fields = [
                'real_name','phone','email','qq','pwd','money_pwd'
            ];

            if(in_array($field,$fields)) {

                if($field == 'pwd' || $field == 'money_pwd') {
                    $newVal = base64_encode($newVal);
                }

                $update_data = [
                    $field => $newVal,
                    'update_time' => time(),
                ];
                $res = RUser::updateAll($update_data,'id = '.$this->userInfo['id']);
                if($res) {
                    $json = ['result'=>'success','info' => '操作成功'];
                } else {
                    $json = ['result'=>'fail','info' => '操作失败'];
                }
                return $this->asJson($json);
            }
        }
    }

    /**
     * 充值记录
     */
    public function actionRecharge()
    {
        $gameNotice = $this->getGameNotice();

        $page = \Yii::$app->request->get('page', 1);
        $startDate = \Yii::$app->request->get('startDate','');
        $endDate = \Yii::$app->request->get('endDate','');

        $where = [];
        if(!empty($startDate) && !empty($endDate)) {
            $where = ['between', 'create_time', strtotime($startDate), strtotime($endDate) + 86399];
        }

        //用户游戏账号信息
        $userGame = RUserGame::find()->where(['user_id' => $this->userInfo['id']])->asArray()->all();
        $userGame = array_column($userGame, 'game_account', 'game_id');

        $query = RRechargeRecord::find()->where(['user_id' => $this->userInfo['id']])->andWhere($where);
        $count = $query->count();

        $offset = ($page - 1) * 10;

        $recharge = $query->offset($offset)->limit(10)->orderBy('id desc')->asArray()->all();

        if ($recharge) {
            foreach ($recharge as $k => $v) {
                $recharge[$k]['account'] = $userGame[$v['game_type']] ?? '--';
            }
        }
        $totalPage = ceil($count / 10);

        return $this->render('recharge', [
            'gameNotice' => $gameNotice,
            'recharge' => $recharge,
            'count' => $count,
            'totalPage' => $totalPage,
            'page' => $page,
            'startDate' => $startDate,
            'endDate' => $endDate,
        ]);
    }

    /**
     * 登录记录
     */
    public function actionLogin()
    {
        $gameNotice = $this->getGameNotice();
        $page = \Yii::$app->request->get('page', 1);

        $query = RUserLoginRecord::find()->where(['user_id' => $this->userInfo['id']]);
        $count = $query->count();

        $offset = ($page - 1) * 10;
        $loginRecord = $query->offset($offset)->limit(10)->orderBy('id desc')->asArray()->all();

        $totalPage = ceil($count / 10);

        return $this->render('login', [
            'gameNotice' => $gameNotice,
            'loginRecord' => $loginRecord,
            'count' => $count,
            'totalPage' => $totalPage,
            'page' => $page,
        ]);
    }

    /**
     * 投注记录
     */
    public function actionBet()
    {
        $gameNotice = $this->getGameNotice();

        //本页输赢
        $pageResult = 0;

        $page = \Yii::$app->request->get('page', 1);
        $startDate = \Yii::$app->request->get('startDate', '');
        $endDate = \Yii::$app->request->get('endDate', '');

        $where = [];
        if (!empty($startDate) && !empty($endDate)) {
            $where = ['between', 'settlement_time', strtotime($startDate), strtotime($endDate) + 86399];
        }

        //游戏名称
        $game = RGame::find()->asArray()->all();
        $game = array_column($game, 'name', 'id');

        //用户游戏账号信息
        $userGame = RUserGame::find()->where(['user_id' => $this->userInfo['id']])->asArray()->all();
        $userGame = array_column($userGame, 'game_account', 'game_id');

        //投注记录
        $query = RBet::find()->where(['user_id' => $this->userInfo['id']])->andWhere($where);
        $count = $query->count();

        $allResult = RBet::find()->where(['user_id' => $this->userInfo['id']])->andWhere($where)->sum('result_money');


        $offset = ($page - 1) * 10;
        $bet = $query->offset($offset)->limit(10)->orderBy('id desc')->asArray()->all();
        if ($bet) {
            foreach ($bet as $k => $v) {
                $gameRecord = RGameRecord::find()->where(['id' => $v['game_record_id']])->asArray()->one();
                $bet[$k]['account'] = $userGame[$gameRecord['game_id']] ?? '--';
                $bet[$k]['gameTitle'] = $game[$gameRecord['game_id']] ?? '--';
                $bet[$k]['series_id'] = $gameRecord['series_id'];
                $bet[$k]['platform_id'] = $gameRecord['platform_id'];
                $bet[$k]['inning_id'] = $gameRecord['inning_id'];
                $pageResult += $v['result_money'];
            }
        }
        $totalPage = ceil($count / 10);

        return $this->render('bet', [
            'gameNotice' => $gameNotice,
            'bet' => $bet,
            'count' => $count,
            'totalPage' => $totalPage,
            'page' => $page,
            'startDate' => $startDate,
            'endDate' => $endDate,
            'pageResult' => $pageResult / 100,
            'allResult' => $allResult / 100,
        ]);
    }

    /**
     * 公告信息
     */
    public function actionNotice()
    {
        $gameNotice = $this->getGameNotice();

        $page = \Yii::$app->request->get('page', 1);

        $query = RNoticeSystem::find()->where([ 'status' => 1]);
        $count = $query->count();

        $offset = ($page - 1) * 10;
        $notice = $query->offset($offset)->limit(10)->orderBy('id desc')->asArray()->all();

        $totalPage = ceil($count / 10);

        return $this->render('notice', [
            'gameNotice' => $gameNotice,
            'notice' => $notice,
            'count' => $count,
            'totalPage' => $totalPage,
            'page' => $page,
        ]);
    }

    /**
     * 获取游戏通知
     * @return mixed|string
     */
    private function getGameNotice()
    {
        $gameNotice = RNoticeGame::find()->where(['status' => 1])->orderBy('id desc')->asArray()->one();
        if ($gameNotice) {
            return $gameNotice['content'];
        } else {
            return '';
        }
    }


}